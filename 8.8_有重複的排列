#include <iostream>
#include <vector>
#include <string>
#include <unordered_map>

std::unordered_map<char,int> builtMap(std::string str){
  std::unordered_map<char,int> map;
  if((int)str.length()==0){ return map; }
  for(char c:str){
    if(map.find(c)==map.end()){ map[c] = 1; }
    else{ int count = map[c]; map[c] = count+1; }
  }
  return map;
}



#include <iostream>
#include <vector>
#include <string>

std::vector<std::string> classification(std::string str){
  std::vector<std::string> output{};
  
  if((int)str.length()==0){ return output; }
  
  int start  =0;
  std::string s = ""; s = s+str.at(start) ;
  for(int i=1;i<(int)str.length();i++){
    if(str.at(start)==str.at(i)){ s = s+ str.at(i); }
    else{ 
      output.push_back(s); 
      s.clear();
      start = i; 
      s = s + str.at(start);
    }
  }
  output.push_back(s); 
  s.clear();
  
  std::cout<< str << " : " ;
  for(auto o:output){ std::cout << o << ", "; }
  std::cout<< std::endl;
  return output;
}

void count(int idx,std::vector<std::string> input,std::vector<std::string>& ans){
  int len{(int)input.size()};
  if(len==0 || idx>=len){ return; }

  if((int)ans.size()==0){ ans.push_back(""); }

  std::string temp = input[idx];
  std::vector<std::string> vec{};
    for(auto str:ans){
      for(int i=0;i<=(int)str.length();i++){
        if(i==0){ vec.push_back(temp+str); }
        else if(i==(int)str.length()){ vec.push_back(str+temp); }
        else{
          std::string ss = str.substr(0,i) + temp + str.substr(i,((int)str.length())-1);
          vec.push_back(ss);
        }
      }
    } 
    ans = vec;

  count(idx+1,input,ans);
}



int main(){
  std::string str = "aabccc";
  int len{static_cast<int>(str.length())};
  std::vector<std::string> output{};
  output = classification(str);

  std::vector<std::string> ans{};
  count(0,output,ans);
  for(auto s:ans){ std::cout<<s<<", "; }
  std::cout<<std::endl;
  
  return 0;
}
